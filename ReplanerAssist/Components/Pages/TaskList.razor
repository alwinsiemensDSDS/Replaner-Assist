@page "/task-list"
@using ReplanerAssist.Database
@using ReplanerAssist.Entity
@inject IReplanerDB replanerdb;
@inject NavigationManager Navigation

<div class="row">
    <h5><p class="text-light">Aufgabenliste</p></h5>
</div>
@if (replanerdb.Aufgaben.Count == 0)
{
    <p>Es sind keine Augabe angelegt</p>
}
else
{
    @foreach (var aufgabe in replanerdb.Aufgaben)
    {
        <div class="form-check text-light">
            <input class="form-check-input" @onchange="() => SwitchAufgabe(aufgabe)" type="radio" name="flexRadioDefault" id="flexRadioDefault1" checked="@(replanerdb.selectedAufgabe?.WID == aufgabe.WID)"><button @onclick="() => editAufgabe(aufgabe)" class="btn-small fs-6"><span class="bi-pencil"></span></button>
            <label class="form-check-label" for="flexRadioDefault1">
                @aufgabe.Titel
            </label>
            <p class="text-light p-2">@aufgabe.Beschreibung</p>
        </div>
    }
}



<div>
       <nav class="navbar fixed-bottom nav_bar container-fluid">
      <div class="row w-100 m-0 gx-0">
        <div class="col d-flex justify-content-start"><NavLink href="/"><button class="btn-primary fs-1 px-4" ><span class="bi bi-arrow-left"></span></button></NavLink></div>
            <div class="col d-flex justify-content-center"><button @onclick="AddAufgabe" class="btn-primary fs-1 px-4"><span class="bi-plus-circle-fill"></span></button></div>
        <div class="col d-flex justify-content-center"><NavLink><button class="btn-primary fs-1 px-4" ><span class=""></span></button></NavLink></div>
      </div> 
    </nav>
</div>

<style>
    .navbar {
    background-color: #222222;
}
.btn-primary{
    background-color: transparent;
    border-color: transparent;
    box-shadow: none;
    text-decoration: none;
}

.btn-primary:focus,
    .btn-primary:hover {
        background-color: transparent;
        border-color: transparent;
        box-shadow: none;
        text-decoration: none;
        outline: none !important;

    }

</style>

@code {

    public async Task SwitchAufgabe(WiederkehrendeAufgabe aufgabe)
    {
        replanerdb.selectedAufgabe = aufgabe;
        await replanerdb.SaveDatabase();
        Navigation.NavigateTo("/");
    }

    public async Task AddAufgabe()
    {
        Entity.WiederkehrendeAufgabe aufgabe = new Entity.WiederkehrendeAufgabe();
        aufgabe.Titel = "Testaufgabe";
        aufgabe.Beschreibung = "Test";

        replanerdb.Aufgaben.Add(aufgabe);
        if (replanerdb.selectedAufgabe == null)
        {
            replanerdb.selectedAufgabe = aufgabe;
        }

        await replanerdb.SaveDatabase();

    }

    public void editAufgabe(WiederkehrendeAufgabe aufgabe)
    {
        
    }
}