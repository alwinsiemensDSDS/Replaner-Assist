@page "/edit-aufgabe"
@page "/edit-aufgabe/{aufgabewid}"
@using Entity
@using ReplanerAssist.Database
@inject IReplanerDB replanerdb;
@inject NavigationManager Navigation;

@if (aufgabewid != null)
{
    <div class="row text-light">
        <strong><h4><p class="text-light py-2">Aufgabe bearbeiten</p></h4></strong>
    </div>
}
else
{
    <div class="row text-light">
        <strong><h4><p class="text-light py-2">Aufgabe hinzufügen</p></h4></strong>
    </div>
}

<EditForm class="pKreis" Model="aufgabeModel" OnValidSubmit="SaveAufgabe">
    <div class="form-group text-light">
        <label class="form-label" for="aufgabeTitel">Titel</label>
        <input
            type="text"
            @bind-value="aufgabeModel.Titel"
            class="form-control"
            id="aufgabeTitel"
            aria-describedby="nameHelp"
            placeholder="Hier den Titel eingeben..." />

        <label class="form-label" for="aufgabeBeschreibung">Beschreibung</label>
        <InputTextArea
            class="form-control"
            @bind-Value="aufgabeModel.Beschreibung"
            id="aufgabeBeschreibung" />
    </div>

    <div class="pKreis">
        <div class="row">
            <h5>
                Wähle den Personenkreis aus:
            </h5>
        </div>
        <div class="container-fluid overflow-auto" style="height: calc(100vh - 550px)">
        @foreach (var person in replanerdb.Personen)
        {
            <div class="form-check text-light">
                <input
                    type="radio"
                    class="form-check-input"
                    @onclick="() => addRemovePerson(person)"
                    id="@person.PID"
                    checked="@(aufgabeModel.PersonenListe.Contains(person))" />
                <label class="form-check-label" for="@person.PID">
                    @person.Vorname @person.Nachname
                </label>
            </div>
        }
        </div>
    </div>

    <div>
        <button class="btn btn-success" type="submit">Submit</button>
    </div>
</EditForm>

@if (aufgabewid != null)
{
    <button @onclick="DeleteAufgabe" type="button py-2" class="btn btn-warning">Aufgabe Löschen</button>
}

@code {
    [Parameter]
    public string? aufgabewid { get; set; }

    WiederkehrendeAufgabe aufgabeModel;

    protected override async Task OnInitializedAsync()
    {
        aufgabeModel = replanerdb.Aufgaben.Find(aufgabe => aufgabe.WID == aufgabewid) ?? new WiederkehrendeAufgabe();
    }

    public void addRemovePerson(Person person)
    {
        if (aufgabeModel.PersonenListe.Remove(person))
        {
            aufgabeModel.PersonenIDs.Remove(person.PID);
        }
        else
        {
            aufgabeModel.PersonenListe.Add(person);
            aufgabeModel.PersonenIDs.Add(person.PID);
        }
    }


    public async Task SaveAufgabe()
    {
        if (aufgabewid != null)
        {
            int index = replanerdb.Aufgaben.FindIndex(aufgabe => aufgabe.WID == aufgabewid);
            replanerdb.Aufgaben[index] = aufgabeModel;
        }
        else
        {
            replanerdb.Aufgaben.Add(aufgabeModel);
        }

        replanerdb.selectedAufgabe = aufgabeModel;
        await replanerdb.SaveDatabase();
        Navigation.NavigateTo("/task-list");
    }

    public async Task DeleteAufgabe()
    {
        foreach (Termin termin in replanerdb.Termine.FindAll(t => t.WID == aufgabewid))
        {
            replanerdb.Termine.Remove(termin);
        }
        int index = replanerdb.Aufgaben.FindIndex(aufgabe => aufgabe.WID == aufgabewid);
        replanerdb.Aufgaben.RemoveAt(index);
        if (replanerdb.selectedAufgabe != null && replanerdb.selectedAufgabe.WID == aufgabeModel.WID)
        {
            replanerdb.selectedAufgabe = replanerdb.Aufgaben.FirstOrDefault();
        }
        await replanerdb.SaveDatabase();
        Navigation.NavigateTo("/task-list");
    }
}
